
# DIESE DATEI SOLLTE DURCH DIE REFERATE NICHT GEÄNDERT WERDEN!
# ANPASSUNGEN SOLLTEN NUR IN referat.conf DURCHGEFÜHRT WERDEN!

# Der WollMux kann Informationen aus verschiedenen Datenquellen zusammenführen und nutzen.
# Es ist zum Beispiel möglich, Name, Vorname, Orga-Einheit, Telefonnummer und Büroanschrift aus
# einem LDAP-Verzeichnis lesen, die zur Büroanschrift passende ÖPNV-Verbindung aus einer
# Textdatei auf einem Netzlaufwerk ergänzen und mit diesen Informationen automatisch einen
# Briefkopf befüllen zu lassen.
#
# Diese Datei enthält die Definitionen der Datenquellen, die der WollMux nutzen soll.
# Die Datenquellendefinitionen werden in der Reihenfolge ausgewertet in der sie in dieser Datei
# stehen. Jede Datenquellendefintion kann sich dabei auf vorangehende Definitionen beziehen.
# Zum Beispiel wird in dieser Datei die Datenquelle "personal" immer wieder redefiniert unter
# Bezugname auf die vorangehende Definition von "personal".
#
# Die SENDER_SOURCE Direktive gibt an, welche Datenquelle zum Befüllen der Absenderangaben
# in Briefköpfen verwendet werden soll.
SENDER_SOURCE "personal"

# Über das Setzen von SENDER_DISPLAYTEMPLATE kann gesteuert werden wie die Einträge der
# persönlichen Absenderliste (PAL) angezeigt werden sollen (und auch intern über die
# WollMux-Implementierung des XPALProvider-Interfaces ausgegeben werden).
# Neben statischen Textteilen kann das Anzeigemuster Platzhalter der Form %{Spaltenname}
# enthalten, die für den jeweiligen Datensatz durch den entsprechenden Datenbankspaltenwert
# ersetzt werden.
SENDER_DISPLAYTEMPLATE "%{Nachname}, %{Vorname} (%{Rolle})"

# Mit DATASOURCE_TIMEOUT kann ein Timeout für die Suche in Datenquellen (z.B. im Dialog
# "Absenderliste Verwalten") angegeben werden.
DATASOURCE_TIMEOUT "10000"

DataSources(

    DataSource(
    NAME "ldap"
    TYPE "conf"
    URL "conf/ldapdaten.conf"
    Schluessel( "OID" )
  )

  DataSource(
    NAME "personal" TYPE "schema" SOURCE "ldap"
    ADD("OberOrga")
    ADD("OrgaName")
    ADD("DienstBezLang")
    ADD("FussSpalte1")
    ADD("FussSpalte2")
    ADD("FussSpalte3")
    ADD("FussSpalte4")
    ADD("FussSpalte12")
    ADD("FussSpalte22")
    ADD("FussSpalte32")
    ADD("FussSpalte42")
  )

###############################################################################
# Die folgenden 3 Datenquellen fügen die Spalten der Fußzeile abhängig von der
# OrgaKurz hinzu. Für ein Hinzufügen von Spalten in Abhängigkeit von anderen
# Spalten ist grundsätzlich immer eine Gruppe aus 3 Datenquellen erforderlich,
# die nach dem Prinzip der untenstehenden definiert sind.
###############################################################################

  DataSource(
    NAME "mapOrgaKurz" TYPE "conf"
    URL "conf/mapOrgaKurz.conf"
    Schluessel( "OrgaKurz" )
  )

  DataSource(
    NAME "personal"
    TYPE "attach"
    SOURCE "personal"
    ATTACH "mapOrgaKurz"
    MATCH("OrgaKurz" "OrgaKurz")
  )

  DataSource(
    NAME "personal" TYPE "schema" SOURCE "personal"
    RENAME("mapOrgaKurz__FussSpalte1" "FussSpalte1")
    RENAME("mapOrgaKurz__FussSpalte2" "FussSpalte2")
    RENAME("mapOrgaKurz__FussSpalte3" "FussSpalte3")
    RENAME("mapOrgaKurz__FussSpalte4" "FussSpalte4")
    DROP("mapOrgaKurz__OrgaKurz")
  )

###############################################################################
# Die folgenden 3 Datenquellen fügen die Spalten der Fußzeile abhängig vom
# Dienstgebaeude hinzu. Für ein Hinzufügen von Spalten in Abhängigkeit von anderen
# Spalten ist grundsätzlich immer eine Gruppe aus 3 Datenquellen erforderlich,
# die nach dem Prinzip der untenstehenden definiert sind.
###############################################################################

 DataSource(
    NAME "mapDienstgebaeude" TYPE "conf"
    URL "conf/mapDienstgebaeude.conf"
    Schluessel( "Dienstgebaeude" )
  )

  DataSource(
    NAME "personal"
    TYPE "attach"
    SOURCE "personal"
    ATTACH "mapDienstgebaeude"
    MATCH("Dienstgebaeude" "Dienstgebaeude")
  )

  DataSource(
    NAME "personal" TYPE "schema" SOURCE "personal"
    RENAME("mapDienstgebaeude__FussSpalte12" "FussSpalte12")
    RENAME("mapDienstgebaeude__FussSpalte22" "FussSpalte22")
    RENAME("mapDienstgebaeude__FussSpalte32" "FussSpalte32")
    RENAME("mapDienstgebaeude__FussSpalte42" "FussSpalte42")
    DROP("mapDienstgebaeude__Dienstgebaeude")
  )

###############################################################################
# Die folgenden 3 Datenquellen fügen die Spalte DienstBezLang abhängig von der
# DienstBezKurz hinzu. Für ein Hinzufügen von Spalten in Abhängigkeit von anderen
# Spalten ist grundsätzlich immer eine Gruppe aus 3 Datenquellen erforderlich,
# die nach dem Prinzip der untenstehenden definiert sind.
###############################################################################

 DataSource(
    NAME "mapDienstBezKurzLang" TYPE "conf"
    URL "conf/mapDienstBezKurzLang.conf"
    Schluessel( "DienstBezKurz" "Anrede")
  )

  DataSource(
    NAME "personal"
    TYPE "attach"
    SOURCE "personal"
    ATTACH "mapDienstBezKurzLang"
    MATCH("DienstBezKurz" "DienstBezKurz")
    MATCH("Anrede" "Anrede")
  )

  DataSource(
    NAME "personal" TYPE "schema" SOURCE "personal"
    RENAME("mapDienstBezKurzLang__DienstBezLang" "DienstBezLang")
    DROP("mapDienstBezKurzLang__DienstBezKurz")
    DROP("mapDienstBezKurzLang__Anrede")
  )

###############################################################################
# Die folgenden 3 Datenquellen fügen die Spalten für den Referent abhängig vom
# Referat hinzu. Für ein Hinzufügen von Spalten in Abhängigkeit von anderen
# Spalten ist grundsätzlich immer eine Gruppe aus 3 Datenquellen erforderlich,
# die nach dem Prinzip der untenstehenden definiert sind.
###############################################################################

  DataSource(
    NAME "mapReferent" TYPE "conf"
    URL "conf/mapReferent.conf"
    Schluessel("Referat")
  )

  DataSource(
    NAME "personal"
    TYPE "attach"
    SOURCE "personal"
    ATTACH "mapReferent"
    MATCH("Referat" "Referat")
  )

  DataSource(
    NAME "personal" TYPE "schema" SOURCE "personal"
    RENAME("mapReferent__Titel_Referent" "Titel_Referent")
    RENAME("mapReferent__Name_Referent" "Name_Referent")
    RENAME("mapReferent__Vorname_Referent" "Vorname_Referent")
    RENAME("mapReferent__Bezeichnung_Referent" "Bezeichnung_Referent")
    RENAME("mapReferent__Strasse_Referent" "Strasse_Referent")
    RENAME("mapReferent__PLZ_Referent" "PLZ_Referent")
    RENAME("mapReferent__Ort_Referent" "Ort_Referent")
    RENAME("mapReferent__Telefon_Referent" "Telefon_Referent")
    RENAME("mapReferent__Telefax_Referent" "Telefax_Referent")
    DROP("mapReferent__Referat")

  )

)#DataSources


# Wird der WollMux zum ersten Mal in einem Benutzerprofil gestartet, so ist dem
# WollMux (noch) nicht bekannt, welcher Absender für die Briefköpfe verwendet
# werden soll. Daher läuft immer dann wenn die Persoenliche Absenderliste keine
# Einträge hat beim Starten des WollMux eine Initialisierungsroutine ab, die
# versucht, die Persoenliche Absenderliste mit mindestens einem Wert zu belegen.
# Dieser Abschnitt beschreibt die Suchstrategie, die dazu angewandt wird. Die
# Suche findet immer in der Datenquelle statt, die über SENDER_SOURCE
# spezifiziert ist.
PersonalSenderListInit(
  SearchStrategy(

    BY_JAVA_PROPERTY(Mail "christoph.mux@example.com")

    # Unter Extras->Optionen->OpenOffice.org->Benutzerdaten können in
    # OpenOffice Benutzerdaten hinterlegt werden. In dieser Regel wird
    # nach der Kombination Vorname/Nachname gesucht, wobei die entsprechenden
    # Felder im OOo_USER_PROFILE "givenname" und "sn" heissen.
    BY_OOO_USER_PROFILE(Vorname "${givenname}" Nachname "${sn}")

  )
)
